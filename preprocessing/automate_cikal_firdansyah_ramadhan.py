# -*- coding: utf-8 -*-
"""automate_Cikal-Firdansyah-Ramadhan.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1lzQF-a_azo2_LQ8dR1zvjh9cNyvSArHq
"""

import pandas as pd
import numpy as np
from sklearn.preprocessing import LabelEncoder, StandardScaler

def preprocess_telco(df: pd.DataFrame) -> pd.DataFrame:
    """
    Fungsi untuk melakukan preprocessing data Telco Customer Churn secara otomatis.

    Tahapan preprocessing:
    1. Menangani missing value dan menghapus duplikat
    2. Encoding fitur kategorikal
    3. Normalisasi fitur numerik
    4. Binning fitur tenure
    5. Menghapus kolom ID jika ada
    """

    # 1. Convert TotalCharges dan handle missing value
    if 'TotalCharges' in df.columns:
        df['TotalCharges'] = pd.to_numeric(df['TotalCharges'].replace(" ", np.nan), errors='coerce')
    df.dropna(inplace=True)

    # 2. Hapus data duplikat
    df.drop_duplicates(inplace=True)

    # 3. Hapus kolom ID jika ada
    if 'customerID' in df.columns:
        df.drop(columns='customerID', inplace=True)

    # 4. Deteksi outlier (opsional, hanya print jumlah)
    if 'TotalCharges' in df.columns:
        Q1 = df['TotalCharges'].quantile(0.25)
        Q3 = df['TotalCharges'].quantile(0.75)
        IQR = Q3 - Q1
        outliers = df[(df['TotalCharges'] < Q1 - 1.5 * IQR) | (df['TotalCharges'] > Q3 + 1.5 * IQR)]
        print(f"[INFO] Jumlah outlier TotalCharges: {len(outliers)} (tidak dihapus)")

    # 5. Encoding semua kolom kategorikal
    categorical_cols = df.select_dtypes(include='object').columns
    le = LabelEncoder()
    for col in categorical_cols:
        df[col] = le.fit_transform(df[col])

    # 6. Normalisasi fitur numerik
    scaler = StandardScaler()
    numeric_cols = ['tenure', 'MonthlyCharges', 'TotalCharges']
    for col in numeric_cols:
        if col in df.columns:
            df[col] = scaler.fit_transform(df[[col]])

    # 7. Binning kolom tenure
    if 'tenure' in df.columns:
        df['tenure_group'] = pd.cut(df['tenure'],
                                    bins=[-np.inf, -0.5, 0.5, np.inf],
                                    labels=['Low', 'Medium', 'High'])

    return df